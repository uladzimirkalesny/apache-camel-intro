Apache Camel:
Ядром Apache Camel является routing-движок, или по другому routing-engine builder.

Camel’s message model:
В Camel есть две абстракции для модели сообщений:
org.apache.camel.Message - объект, который хранит данные и маршрутизируется в Camel
org.apache.camel.Exchange - абстракция для обмена сообщений. Exchange имеет как входное сообщение так и выходное в качестве ответа

Message - передаются в одном направлении(one direction) от Sender к Receiver
	Sender ----->  Message  -----> Receiver
Message имеют тело(body)-payload, заголовки(headers), необязательные вложения (optional attachments)
Сообщения однозначно идентифицируются с помощью идентификатора типа java.lang.String. 
Уникальность идентификатора обеспечивается и гарантируется создателем сообщения, зависит от протокола и не имеет гарантированного формата. 
Для протоколов, которые не определяют уникальную схему идентификации сообщений, Camel использует свой собственный генератор UID.

Заголовки - это значения, связанные с сообщением, такие как идентификаторы отправителя, подсказки о кодировке содержимого, информация об аутентификации и т. д.
Заголовки - это пары имя-значение; имя является уникальной строкой без учета регистра, а значение имеет тип java.lang.Object.
Заголовки хранятся в виде map в сообщении

Сообщение также может иметь дополнительные вложения, которые обычно используются для веб-службы и компонентов электронной почты.

Body типа java.lang.Object. Когда отправитель и получатель используют разные форматы тела, Camel предоставляет ряд механизмов для преобразования данных в 
приемлемый формат, и во многих случаях преобразование происходит автоматически с помощью преобразователей типов за кулисами.

Message также имеют флаг ошибки. Некоторые протоколы и спецификации, такие как WSDL и JBI, различают выходные сообщения и сообщения об ошибках. 
Они оба являются действительными ответами на вызов операции, но последний указывает на неудачный результат. 
Как правило, ошибки не обрабатываются инфраструктурой интеграции. 
Они являются частью договора между клиентом и сервером и обрабатываются на уровне приложения.


Exchange - В Camel является контейнером сообщений во время routing.
Exchange предоставляет поддержку различных типов взаимодействий между системами, называемых шаблоны обмена сообщениями (MEP)
MEP используются для разграничения стилей обмена сообщениями в one-way и request-response запросах. 
Exchange Camel содержит свойство pattern, которое может быть:
	InOnly - one-way сообщение (также известное как Event message) - JMS message
	InOut — request-response message - Http-based 
Exchange состоит из:
	- Exchange ID - Уникальный id, который идентифицирует exchange. Camel сгенерирует уникальный id по умолчанию, если вы его не указали явно.
	- MEP - Шаблон, который обозначает, используете ли вы стиль сообщений InOnly или InOut. Когда шаблон InOnly, обмен содержит входящее сообщение. 
Для InOut также существует исходящее сообщение, которое содержит ответное сообщение
	- Exception - если в любой момент во время маршрутизации возникает ошибка, в поле исключения будет установлено исключение.
	- Properties - аналогично с headers, но они сохраняются в течение всего обмена. Properties используются для хранения информации глобального уровня, 
тогда как заголовки сообщений относятся к конкретному сообщению. Camel добавляет различные properties к exchange во время routing.
Developer может извлекать, сохранять properties.
	- In message - Это входное сообщение, которое является обязательным. Содердит request message.
	- Out message - это необязательное сообщение, которое существует только если MEP имеет значение InOut.
	

Сamel Architecture:
Routing engine (Механизм маршрутизации) использует routes в качестве спецификаций для маршрутизации messages.
Routes определяются с использованием одного из доменных языков Camel (DSL)
Processors(Процессоры) используются для преобразования и управления сообщениями во время маршрутизации, а также для реализации всех 
шаблонов EIP, имеющих соответствующие ключевые слова на языках DSL. 
Components (Компоненты) являются точками расширения в Camel для добавления подключения к другим системам. 
Чтобы представить эти системы остальной части Camel, компоненты предоставляют интерфейс конечной точки.


Camel concepts:
CamelContext - является средой выполнения Camel, своего рода контейнер, который объединяет все части.
CamelContext предоставляет доступ ко многим полезным службам, наиболее заметными из которых являются: components, type converters, a registry,
endpoints, routes, data formats, and languages.

Components - Содержит используемые компоненты. Camel способен загружать компоненты на лету либо путем автоматического обнаружения на пути к классам, либо при активации нового пакета в контейнере OSGi.
Endpoints - Содержит конечные точки, которые были созданы
Routes - Содержит маршруты, которые были добавлены.
Type converters - Содержит загруженные конвертеры типов. Camel имеет механизм, который позволяет вручную или автоматически конвертировать из одного типа в другой
Data formats - Содержит загруженные форматы данных
Registry - Содержит реестр, который позволяет вам искать бины. По умолчанию это будет реестр JNDI. Если вы используете Camel из Spring, это будет Spring ApplicationContext. 
Это также может быть реестр OSGi, если вы используете Camel в контейнере OSGi
Languages - Содержит загруженные языки. Camel позволяет использовать много разных языков для создания выражений.


ROUTING ENGINE:
Routing Engine Camel - это то, что фактически перемещает message под капотом. Этот механизм не доступен для разработчика, но вы должны знать, что он есть и что он выполняет всю тяжелую работу, обеспечивая правильную маршрутизацию сообщений.

Routes:
Routes являются основной абстракцией для Camel. Самый простой способ определить route - это цепочка processors.
Путем отделения клиентов от серверов и производителей от потребителей routes могут:
	- Динамически решить, какой сервер будет вызывать клиент
	- Предоставиь гибкий способ добавить дополнительную обработку
	- Разрешить клиентам и серверам разрабатываться независимо
	- Разрешить для клиентов серверов быть заглушенным (используя ложные показания) для целей тестирования
	- Внедрение лучших методов проектирования путем подключения разрозненных систем, которые хорошо выполняют одну задачу
	- Расширять возможности и функциональность некоторых систем (таких как брокеры сообщений и ESB)
Каждый route в Camel имеет уникальный идентификатор, который используется для регистрации, отладки, мониторинга, запуска и остановки routes.
Routes также имеют ровно один источник ввода для сообщений, поэтому они эффективно привязаны к endpoint ввода.

DOMAIN-SPECIFIC LANGUAGE (DSL)
Чтобы связать processors и endpoints вместе для формирования routes, Camel определяет DSL. 
Термин DSL здесь используется немного свободно. В Camel DSL означает свободный API Java, который содержит методы, названные для терминов EIP.
from("file:data/inbox")
	.filter().xpath("/order[not(@test)]")
	.to("jms:queue:order")
Сообщения направляются в фильтр EIP, который будет использовать предикат XPath, чтобы проверить, является ли сообщение тестовым заказом или нет.
Если сообщение проходит тест, оно пересылается в конечную точку JMS. Сообщения, не прошедшие проверку фильтра, будут удалены.

SPRING DSL:
<route>
	<from uri="file:data/inbox"/>
	<filter>
		<xpath>/order[not(@test)]</xpath>
		<to uri="jms:queue:order"/>
	</filter>
</route>

DSL обеспечивают хорошую абстракцию для пользователей Camel для создания приложений. Однако под капотом route фактически состоит из graph processors.

PROCESSOR
Processor - это основная концепция Camel, представляющая node, способный использовать, создавать или изменять входящий exchange.
Во время routing обмены передаются от одного процессора к другому; таким образом, вы можете думать о маршруте как о graph, 
имеющем специализированные процессоры в качестве nodes, и линиях, которые соединяют выход одного процессора с входом другого. 
Многие из процессоров являются реализациями EIP, но можно легко реализовать свой собственный процессор и вставить его в маршрут.

COMPONENT
Component - являются основной точкой расширения в Camel. 
На сегодняшний день в экосистеме Camel насчитывается более 80 компонентов, которые функционируют от data transports до DSL, форматов данных и т. д.
С точки зрения программирования, компоненты довольно просты: они связаны с именем, используемым в URI, и действуют как фабрика endpoits. 
Например, FileComponent ссылается на файл в URI и создает FileEndpoints. Endpoint, возможно, является еще более фундаментальной концепцией в Camel

ENDPOINT
Endpoint - это абстракция Camel, которая моделирует конец канала, через который система может отправлять или получать messages.
В Camel endpoints настраиваются, используя URI, такие как file:data/inbox?Delay=5000, и вы также ссылаетесь на endpoints таким образом. 
Во время выполнения, Camel будет искать endpoint на основе записи URI.

file:data/inbox?Delay=5000 - Endpoint состоит из:
file - scheme - тип конечной точки. В этом случае схема file выбирает FileComponent. 
Затем FileComponent работает как фабрика, создающая FileEndpoint на основе оставшихся частей URI.
data/inbox - context path - cообщает FileComponent, что начальная папка - data/inbox.
Delay=5000 - options - опция - указывает, что файлы должны опрашиваться с интервалом в 5 секунд.

Endpoint действует как фабрика для создания consumers и producers, способных принимать и отправлять сообщения определенной endpoint.


PRODUCER
Producer - является абстракция Camel, которая относится к объекту, способному создавать и отправлять message endpoint'у.
Когда message необходимо отправить endpoint'у, producer создаст exchange и заполнит его данными, совместимыми с этой конкретным endpoint. 
Например, FileProducer запишет message body в файл.
JmsProducer, с другой стороны, преобразует message Camel в message javax.jms.Message перед отправкой его в пункт назначения JMS. 
Это важная особенность Camel, потому что она скрывает сложность взаимодействия с определенными транспортными средствами. 
Все, что вам нужно сделать, это направить message в endpoint, и producer проделывает тяжелую работу.


CONSUMER
Consumer - это service, который получает messages, произведенные producer, упаковывает их в exchange и отправляет их для обработки. 
Потребители являются источником exchange в Camel.
В Camel есть два вида потребителей: потребители, Event-Driven Consumer, и Polling Consumers.

EVENT-DRIVEN CONSUMER
Этот тип потребителей в основном связан с клиент-серверными архитектурами и веб-сервисами. 
Он также упоминается как асинхронный приемник в мире EIP. 
Потребитель, управляемый событиями, прослушивает определенный канал обмена сообщениями, обычно порт TCP/IP или очередь JMS, и ждет, 
пока клиент отправит ему сообщения. Когда приходит сообщение, потребитель просыпается и принимает сообщение для обработки.

POLLING CONSUMER
В отличие от потребителя, управляемого событиями, потребитель опроса активно отправляет и извлекает сообщения из определенного источника, 
такого как FTP-сервер. Потребитель опроса также известен как синхронный получатель в EIP lingo, потому что он не будет запрашивать 
больше сообщений, пока не завершит обработку текущего сообщения. Распространенным видом потребителя опроса является запланированный 
потребитель опроса, который опрашивает с запланированным интервалом. 
Файлы, FTP и электронная почта все используют запланированные опросы потребителей.



Routing with Camel


В Apache Camel routing является более общей концепцией, которая определяется как пошаговое движение сообщения, которое исходит от endpoint в роли consumer.
Consumer может получать message от внешней службы, опрашивать message в какой-либо системе или даже создавать само message.


ЧТО ТАКОЕ JMS
JMS (Java Message Service) - это Java API, который позволяет создавать, отправлять, получать и читать сообщения.
Он также требует, чтобы обмен сообщениями был асинхронным и имел определенные элементы надежности, такие как гарантированная и однократная доставка.
В JMS consumers и producers сообщений общаются друг с другом через посредника - destination JMS.
Destination JMS м.б. либо queue либо topic.
Queue - строго двухточечные, где каждое сообщение имеет только одного потребителя(consumer).
Client A---Sends--->Queue---Consumes--->Client B

Topics - работают по схеме publish/subscribe; одно сообщение может быть доставлено многим потребителям, если они подписались на эту тему
                             <---Subscribe---
                                                Client D
Client C---Publishes--->Topic ---Delivers--->
                              <---Subscribe---
                                                Client E
                               ---Delivers--->

JMS также предоставляет ConnectionFactory, которую клиенты (например, Camel) могут использовать для создания соединения с поставщиком JMS.
JMS-провайдеров обычно называют брокерами, поскольку они управляют связью между производителем сообщений и потребителем сообщений.


HOW TO CONFIGURE CAMEL TO USE A JMS PROVIDER
Чтобы подключить Camel к определенному провайдеру JMS, вам нужно настроить компонент JMS Camel с соответствующей ConnectionFactory
Apache ActiveMQ является одним из самых популярных JMS-провайдеров и является основным JMS-брокером, который Camel использует для тестирования компонента JMS.

ConnectionFactory connectionFactory = новый ActiveMQConnectionFactory ("vm://localhost"); - местоположение активного доступа

CamelContext camelContext = new DefaultCamelContext();
camelContext.addComponent("jms", JmsComponent.jmsComponentAutoAcknowledge(connectionFactory));


USING URIS TO SPECIFY THE DESTINATION
Допустим, вы хотите отправить сообщение JMS в очередь с именем messagesOrders. URI в этом случае будет
jms:queue:incomingOrders
Префикс «jms» означает компонент JMS, который настроили ранее.
Указывая «queue», компонент JMS знает, что нужно отправить в очередь с именем incomingOrders

Можно опустить спецификатор queue, потому что по умолчанию используется отправка в queue, а не в topic.
The JMS component is discussed here: http://camel.apache.org/jms.html.

Используя Java DSL Camel, вы можете отправить сообщение в queue incomingOrdersй с помощью ключевого слова to, например:
.to("jms:queue:incomingOrders")


CREATING ROUTES IN JAVA
Метод addRoutes CamelContext принимает RoutesBuilder, а не только RouteBuilder. Интерфейс RoutesBuilder имеет единственный определенный метод:
void addRoutesToCamelContext(CamelContext context) throws Exception
Это означает, что вы можете использовать свой собственный класс для построения routes Camel.
Однако наиболее распространенным способом построения routes является использование класса RouteBuilder, который реализует RoutesBuilder.
Класс RouteBuilder также предоставляет вам доступ к Java DSL Camel для создания route.


Using the RouteBuilder
Абстрактный класс org.apache.camel.builder.RouteBuilder в Camel - это тот, который вы будете часто видеть.
Вам нужно будет использовать его каждый раз, когда вы создаете route в Java.
Чтобы использовать класс RouteBuilder, вы расширяете его класс и реализуете метод configure:
class MyRouteBuilder extends RouteBuilder {
    public void configure() throws Exception {
        ...
    }
}
Затем вам нужно добавить класс в CamelContext с помощью метода addRoutes:
CamelContext context = new DefaultCamelContext();
context.addRoutes(new MyRouteBuilder());

Кроме того, вы можете объединить конфигурацию RouteBuilder и CamelContext, добавив анонимный класс RouteBuilder непосредственно в CamelContext, например:
CamelContext context = new DefaultCamelContext();
context.addRoutes(new RouteBuilder() {
    public void configure() throws Exception {
        ...
    }
});


JAVA DSL
(DSL) - это компьютерные языки, нацеленные на конкретную проблемную область, а не на область общего назначения, как большинство языков программирования.
Домен Camel - это корпоративная интеграция, поэтому Java DSL, по сути, представляет собой набор гибких интерфейсов, которые содержат методы, названные в честь терминов из книги EIP.
Каждый оператор Java, который начинается с метода from в RouteBuilder, создает новый route.
Теперь этот новый route завершает вашу первую задачу в Rider Auto Parts - получение заказов с FTP-сервера и отправка их в очередь JMS incomingOrders.
public class RiderCamelJmsJavaDSL {
    public static void main(String[] args) throws Exception {
        CamelContext camelContext = new DefaultCamelContext();

        ConnectionFactory connectionFactory = new ActiveMQConnectionFactory("vm://localhost");
        camelContext.addComponent("jms", JmsComponent.jmsComponentAutoAcknowledge(connectionFactory));
        camelContext.addRoutes(new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from("ftp://rider.com/orders?username=rider&password=secret").to("jms:incomingOrders");
            }
        });

        camelContext.start();
        Thread.sleep(10000);

        camelContext.stop();
    }
}

Метод from сообщает Camel, что нужно принимать сообщения от endpoint FTP, и метод to инструктирует Camel отправлять сообщения в endpoint JMS.
Выходные данные потребителя FTP поступают на вход производителя JMS. Преобразование полезной нагрузки из файла в сообщение JMS выполняется автоматически.
преобразования типа файла FTP в тип сообщения JMS - это было сделано автоматически с помощью средства TypeConverter.


ADDING A PROCESSOR
В середине route можно получить доступ подключаться к потокам или внедрять поведение в функции, используя processors.
Интерфейс Processor в Camel является важным строительным блоком сложных routes. Это простой интерфейс с одним методом:
public void process(Exchange exchange) throws Exception;
Это дает вам полный доступ к обмену сообщениями, позволяя вам делать практически все, что вы хотите с полезной нагрузкой или заголовками. 
Многие компоненты, такие как FileComponent и FtpComponent, устанавливают полезные заголовки, описывающие полезную нагрузку входящего сообщения. 
В предыдущем примере вы использовали заголовок CamelFileName, чтобы получить имя файла, который был загружен через FTP.


Spring DSL
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
    http://camel.apache.org/schema/spring
    http://camel.apache.org/schema/spring/camel-spring.xsd">

    <bean id="jms" class="org.apache.camel.component.jms.JmsComponent">
        <property name="connectionFactory">
            <bean class="org.apache.activemq.ActiveMQConnectionFactory">
                <property name="brokerURL" value="vm://localhost"/>
            </bean>
        </property>
    </bean>

    <bean id="downloadLogger" class="examples.rider.DownloadLogger"/>

    <camelContext xmlns="http://camel.apache.org/schema/spring">
        <route>
            <from uri="file:src/data?noop=true"/>
            <process ref="downloadLogger"/>
            <to uri="jms:incomingOrders"/>
        </route>
    </camelContext>

</beans>

public class DownloadLogger implements Processor {
    @Override
    public void process(Exchange exchange) throws Exception {
        System.out.println("We just downloaded: " + exchange.getIn().getHeader("CamelFileName"));
    }
}


Routing and EIPs
Using a content-based router
Content-Based Router (CBR) - это message router, который направляет сообщение в пункт назначения на основе его содержимого.
Контент может представлять собой заголовок сообщения, тип данных полезной нагрузки, часть самой полезной нагрузки - почти все, что происходит при обмене сообщениями.
Чтобы выполнить условную маршрутизацию, требуемую CBR, Camel вводит несколько ключевых слов в DSL. 
Метод choice создает processor CBR, и условия добавляются следующим выбором с комбинацией метода when и предиката.

from("jms:incomingOrders")
	.choice()
		.when(predicate)
			.to("jms:xmlOrders")
		.when(predicate)
			.to("jms:csvOrders");
predicate - интерфейс Predicate имеет метод matches(Exchange exchange)

Внутри RouteBuilder вы можете начать с использования метода, который возвращает выражение, которое будет соответствовать значению заголовка

header("CamelFileName").endsWith(".xml")

